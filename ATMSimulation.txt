package com.project;

import java.util.Map;

// Abstract class representing a bank account
abstract class BankAccount {
    protected String accountNumber; // Stores the account number
    protected double balance; // Stores the balance of the account
    protected Transaction transactionHistory; // Manages transaction history

    // Constructor to initialize account details
    public BankAccount(String accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
        this.transactionHistory = new Transaction();
    }

    // Abstract methods for account operations
    public abstract void deposit(double amount);
    public abstract void withdraw(double amount);
    public abstract void checkBalance();
    public abstract void checkTransactions();
    public abstract void transfer(String toAccount, double amount, Map<String, ATM> accounts);
}




package com.project;

import java.util.Map;

// ATM class that extends BankAccount
class ATM extends BankAccount {
    public ATM(String accountNumber, double balance) {
        super(accountNumber, balance);
    }

    // Method to deposit money into the account
    @Override
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            transactionHistory.addTransaction("Deposited: " + amount);
            System.out.println("Amount Deposited Successfully!");
        } else {
            System.out.println("Invalid Deposit Amount!");
        }
    }

    // Method to withdraw money from the account
    @Override
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            transactionHistory.addTransaction("Withdrawn: " + amount);
            System.out.println("Amount Withdrawn Successfully!");
        } else {
            System.out.println("Insufficient Balance or Invalid Amount!");
        }
    }

    // Method to check account balance
    @Override
    public void checkBalance() {
        System.out.println("Current Balance: " + balance);
    }

    // Method to check transaction history
    @Override
    public void checkTransactions() {
        transactionHistory.displayTransactions();
    }

    // Method to transfer money to another account
    @Override
    public void transfer(String toAccount, double amount, Map<String, ATM> accounts) {
        if (accounts.containsKey(toAccount) && amount > 0 && amount <= balance) {
            balance -= amount;
            accounts.get(toAccount).balance += amount;
            transactionHistory.addTransaction("Transferred: " + amount + " to " + toAccount);
            accounts.get(toAccount).transactionHistory.addTransaction("Received: " + amount + " from " + accountNumber);
            System.out.println("Transfer Successful!");
        } else {
            System.out.println("Invalid Transfer!");
        }
    }
}






package com.project;

import java.util.*;

// Class to manage transactions
class Transaction {
    private List<String> transactions; // List to store transaction history

    public Transaction() {
        this.transactions = new ArrayList<>();
    }

    // Method to add a transaction to history
    public void addTransaction(String detail) {
        transactions.add(detail);
    }

    // Method to display transaction history
    public void displayTransactions() {
        if (transactions.isEmpty()) {
            System.out.println("No transactions available.");
        } else {
            for (String transaction : transactions) {
                System.out.println(transaction);
            }
        }
    }
}




package com.project;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class Database {
    private Connection connection;

    // Constructor to establish a database connection
    public Database() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/atm", "root", "password");
        } catch (Exception e) {
            System.out.println("Database Connection Failed: " + e.getMessage());
        }
    }

    // Method to save transactions in the database
    public void saveTransaction(String accountNumber, String detail) {
        String query = "INSERT INTO transactions (account_number, detail) VALUES (?, ?)"; // Fixed column name

        try (PreparedStatement pstmt = connection.prepareStatement(query)) {
            pstmt.setString(1, accountNumber);
            pstmt.setString(2, detail);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println("Error Saving Transaction: " + e.getMessage());
        }
    }
}








package com.project;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

// ATM Simulation class with the main method
public class ATMSimulation {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Database db = new Database(); // Database connection for storing transactions

        // Creating multiple accounts using a HashMap
        Map<String, ATM> accounts = new HashMap<>();
        accounts.put("123456", new ATM("123456", 5000.0));
        accounts.put("654321", new ATM("654321", 7000.0));
        accounts.put("111111", new ATM("111111", 6000.0));
        accounts.put("222222", new ATM("222222", 8000.0));
        accounts.put("333333", new ATM("333333", 5500.0));
        accounts.put("444444", new ATM("444444", 6200.0));
        accounts.put("555555", new ATM("555555", 7100.0));
        accounts.put("666666", new ATM("666666", 4300.0));
        accounts.put("777777", new ATM("777777", 3900.0));
        accounts.put("888888", new ATM("888888", 4800.0));
        accounts.put("999999", new ATM("999999", 5200.0));

        // User input for account selection
        System.out.print("Enter Account Number: ");
        String accNo = scanner.next();

        if (!accounts.containsKey(accNo)) {
            System.out.println("Invalid Account Number!");
        }

        ATM atm = accounts.get(accNo);

        // ATM menu loop
        while (true) {
            System.out.println("\n1. Deposit\n2. Withdraw\n3. Check Balance\n4. Check Transactions\n5. Transfer\n6. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            try {
                switch (choice) {
                    case 1:
                        System.out.print("Enter Deposit Amount: ");
                        double dep = scanner.nextDouble();
                        atm.deposit(dep);
                        db.saveTransaction(accNo, "Deposited: " + dep);
                        break;
                    case 2:
                        System.out.print("Enter Withdrawal Amount: ");
                        double withdraw = scanner.nextDouble();
                        atm.withdraw(withdraw);
                        db.saveTransaction(accNo, "Withdrawn: " + withdraw);
                        break;
                    case 3:
                        atm.checkBalance();
                        break;
                    case 4:
                        atm.checkTransactions();
                        break;
                    case 5:
                        System.out.print("Enter Recipient Account Number: ");
                        String toAcc = scanner.next();
                        System.out.print("Enter Transfer Amount: ");
                        double transferAmount = scanner.nextDouble();
                        atm.transfer(toAcc, transferAmount, accounts);
                        db.saveTransaction(accNo, "Transferred: " + transferAmount + " to " + toAcc);
                        db.saveTransaction(toAcc, "Received: " + transferAmount + " from " + accNo);
                        break;
                    case 6:
                        System.out.println("Thank you for using the ATM!");
                        scanner.close();
                        return;
                    default:
                        System.out.println("Invalid Choice!");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }
}









CREATE DATABASE atm;
USE atm;

-- Creating the accounts table
CREATE TABLE accounts (
    account_number VARCHAR(10) PRIMARY KEY,
    balance DOUBLE NOT NULL
);

-- Creating the transactions table
CREATE TABLE transactions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    account_number VARCHAR(10),
    detail VARCHAR(255),
    FOREIGN KEY (account_number) REFERENCES accounts(account_number) ON DELETE CASCADE
);

-- Inserting 10 sample account holders
INSERT INTO accounts (account_number, balance) VALUES
('123456', 5000.0),
('654321', 7000.0),
('111111', 6000.0),
('222222', 8000.0),
('333333', 5500.0),
('444444', 6200.0),
('555555', 7100.0),
('666666', 4300.0),
('777777', 3900.0),
('888888', 4800.0),
('999999', 5200.0);